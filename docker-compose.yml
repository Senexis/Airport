version: '3'
networks:
    rabbitmq: ~
    mongo_baggage: ~

volumes:
    rabbitmq-data: ~
    axon_data: ~

services:
    axon:
      image: axoniq/axonserver:4.1.2
      restart: always
      hostname: axon
      volumes:
        - axon_data:/opt/axonserver/data
      expose:
        - 8024
        - 8124
 
    rabbitmq:
        image: rabbitmq:3.7.5-management
        hostname: app-rabbitmq
        ports:
            - 5672:5672
            - 15672:15672
        volumes:
            - rabbitmq-data:/var/lib/rabbitmq/mnesia/rabbit@app-rabbitmq:cached
        environment:
            RABBITMQ_ERLANG_COOKIE: 6085e2412b6fa88647466c6a81c0cea0
            RABBITMQ_DEFAULT_USER: rabbitmq
            RABBITMQ_DEFAULT_PASS: rabbitmq
            RABBITMQ_DEFAULT_VHOST: /
        networks:
          - rabbitmq

    baggagemanagement:
        build: 
          context: .
          dockerfile: ./domain/baggagemanagement/Dockerfile
        restart: always
        environment:
          - PORT=3000
        command: ["/bin/sh", "-c", "npm install && node app.js"]
        volumes:
          - ./domain/baggagemanagement:/app
        ports: 
          - 3001:3000
        networks:
          - rabbitmq
          - mongo_baggage

    mongo_baggage:
        image: mongo
        volumes:
          - /data/mongo_baggage/db:/data/db
        ports:
          - "27017:27017"
        networks:
          - mongo_baggage
        

    bordermanagement:
        build: 
          context: .
          dockerfile: ./domain/bordermanagement/Dockerfile
        restart: always
        environment:
          - PORT=3000
        command: ["/bin/sh", "-c", "npm install && node app.js"]
        volumes:
          - ./domain/bordermanagement:/app
        ports: 
          - 3002:3000

    mongo_border:
        image: mongo
        volumes:
          - /data/mongo_border/db:/data/db
        ports:
          - "27018:27018"
        networks:
          - mongo_border
        

    checkinmanagement:
        build: 
          context: .
          dockerfile: ./domain/checkinmanagement/Dockerfile
        restart: always
        environment:
          - PORT=3000
        command: ["/bin/sh", "-c", "npm install && node app.js"]
        volumes:
          - ./domain/checkinmanagement:/app
        ports: 
          - 3003:3000

    mongo_checkin:
        image: mongo
        volumes:
          - /data/mongo_checkin/db:/data/db
        ports:
          - "27019:27019"
        networks:
          - mongo_checkin
        

    controlmanagement:
        build: 
          context: .
          dockerfile: ./domain/controlmanagement/Dockerfile
        restart: always
        environment:
          - PORT=3000
        command: ["/bin/sh", "-c", "npm install && node app.js"]
        volumes:
          - ./domain/controlmanagement:/app
        ports: 
          - 3004:3000

    mongo_control:
        image: mongo
        volumes:
          - /data/mongo_control/db:/data/db
        ports:
          - "27020:27020"
        networks:
          - mongo_control
        

    financialmanagement:
        build: 
          context: .
          dockerfile: ./domain/financialmanagement/Dockerfile
        restart: always
        environment:
          - PORT=3000
        command: ["/bin/sh", "-c", "npm install && node app.js"]
        volumes:
          - ./domain/financialmanagement:/app
        ports: 
          - 3005:3000

    mongo_financial:
        image: mongo
        volumes:
          - /data/mongo_financial/db:/data/db
        ports:
          - "27021:27021"
        networks:
          - mongo_financial
        

    flightmanagement:
        build: 
          context: .
          dockerfile: ./domain/flightmanagement/Dockerfile
        restart: always
        environment:
          - PORT=3000
        command: ["/bin/sh", "-c", "npm install && node app.js"]
        volumes:
          - ./domain/flightmanagement:/app
        ports: 
          - 3006:3000

    mongo_flight:
        image: mongo
        volumes:
          - /data/mongo_flight/db:/data/db
        ports:
          - "27022:27022"
        networks:
          - mongo_flight

    matrixmanagement:
        build: 
          context: .
          dockerfile: ./domain/matrixmanagement/Dockerfile
        restart: always
        environment:
          - PORT=3000
        command: ["/bin/sh", "-c", "npm install && node app.js"]
        volumes:
          - ./domain/matrixmanagement:/app
        ports: 
          - 3007:3000

    mongo_matrix:
        image: mongo
        volumes:
          - /data/mongo_matrix/db:/data/db
        ports:
          - "27023:27023"
        networks:
          - mongo_matrix
        

    securitymanagement:
        build: 
          context: .
          dockerfile: ./domain/securitymanagement/Dockerfile
        restart: always
        environment:
          - PORT=3000
        command: ["/bin/sh", "-c", "npm install && node app.js"]
        volumes:
          - ./domain/securitymanagement:/app
        ports: 
          - 3008:3000

    mongo_security:
        image: mongo
        volumes:
          - /data/mongo_security/db:/data/db
        ports:
          - "27024:27024"
        networks:
          - mongo_security
        

    spacemanagement:
        build: 
          context: .
          dockerfile: ./domain/spacemanagement/Dockerfile
        restart: always
        environment:
          - PORT=3000
        command: ["/bin/sh", "-c", "npm install && node app.js"]
        volumes:
          - ./domain/spacemanagement:/app
        ports: 
          - 3009:3000

    mongo_space:
        image: mongo
        volumes:
          - /data/mongo_space/db:/data/db
        ports:
          - "27025:27025"
        networks:
          - mongo_space
        


